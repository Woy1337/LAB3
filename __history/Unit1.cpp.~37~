//---------------------------------------------------------------------------
#include <vcl.h>
#include <math.h>
#pragma hdrstop
#include "Unit1.h"
#include <System.StrUtils.hpp>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

bool hasDecimalPoint = false; // Флаг для десятичной точки

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
    : TForm(Owner)
{
}
//---------------------------------------------------------------------------

// Обработчик кнопки "="
void __fastcall TForm1::ButtonEqualClick(TObject *Sender)
{
    AnsiString expression = Edit1->Text;

    if (!expression.IsEmpty())
    {
        // Добавление закрывающих скобок для незавершенных функций
        int openBrackets = 0;
		int closeBrackets = 0;
		for (int i = 1; i <= expression.Length(); ++i) {
		if (expression[i] == '(') openBrackets++;
		if (expression[i] == ')') closeBrackets++;
		}
        while (openBrackets > closeBrackets) {
            expression += ")";
            closeBrackets++;
        }

        // Обработка acos
        int posAc = 1;
        while (posAc)
        {
            posAc = expression.AnsiPos("acos");
            if (posAc)
            {
                int endPos = PosEx(")", expression, posAc);
                if (!endPos) {
                    expression += ")";
                    endPos = expression.Length();
                }

                // Извлечение аргумента
                AnsiString argStr = expression.SubString(posAc + 5, endPos - (posAc + 5));
                double arg = StrToFloatDef(argStr, 0.0);

                // Проверка диапазона и вычисление
                double result = 0.0;
                if (arg >= -1.0 && arg <= 1.0) {
                    result = acos(arg);
                } else {
                    ShowMessage("Ошибка: аргумент acos должен быть в [-1, 1]");
                    return;
                }

                // Замена выражения
                expression = expression.SubString(1, posAc - 1) +
                            FloatToStr(result) +
                            expression.SubString(endPos + 1, expression.Length());
            }
        }

        // Обработка операторов и вычисление
        expression = StringReplace(expression, ",", ".", TReplaceFlags() << rfReplaceAll);
        expression = StringReplace(expression, "--", "+", TReplaceFlags() << rfReplaceAll);

        // Логика вычислений (ваша реализация парсинга выражений)
        // ... (ваш код обработки операций +-*/)

        Edit1->Text = expression; // Замените на итоговый результат
    }
}
//---------------------------------------------------------------------------

// Обработчик цифровых кнопок
void __fastcall TForm1::NumberPress(TObject *Sender)
{
    TButton *button = dynamic_cast<TButton*>(Sender);
    Edit1->Text += button->Caption;
}
//---------------------------------------------------------------------------

// Обработчик кнопки "."
void __fastcall TForm1::CommaPress(TObject *Sender)
{
    if (!hasDecimalPoint) {
        Edit1->Text += ",";
        hasDecimalPoint = true;
    }
}
//---------------------------------------------------------------------------

// Обработчик операторов + - * /
void __fastcall TForm1::OperationPress(TObject *Sender)
{
    TButton *button = dynamic_cast<TButton*>(Sender);
    AnsiString expr = Edit1->Text;

    if (!expr.IsEmpty()) {
        // Получаем последний символ как AnsiString
        AnsiString lastChar = expr.SubString(expr.Length(), 1);

        // Сравниваем через оператор AnsiString
        if (lastChar == "+" ||
            lastChar == "-" ||
            lastChar == "*" ||
            lastChar == "/")
        {
            expr.SetLength(expr.Length() - 1);
        }
        Edit1->Text = expr + button->Caption;
    }
    hasDecimalPoint = false;
}
//---------------------------------------------------------------------------

// Обработчик кнопки "C" (очистка)
void __fastcall TForm1::ClearAll(TObject *Sender)
{
    Edit1->Text = "";
    hasDecimalPoint = false;
}
//---------------------------------------------------------------------------

// Обработчик кнопки "Backspace"
void __fastcall TForm1::BackspacePress(TObject *Sender)
{
    AnsiString expr = Edit1->Text;
    if (!expr.IsEmpty())
    {
        AnsiString lastChar = AnsiLastChar(expr);
		if (lastChar == "+" || lastChar == "-" || lastChar == "*" || lastChar == "/")
        expr.SetLength(expr.Length() - 1);
        Edit1->Text = expr;
    }
}
//---------------------------------------------------------------------------


void __fastcall TForm1::AcosPress(TObject *Sender) {
    AnsiString expr = Edit1->Text;
    AnsiString lastChar;

    if (!expr.IsEmpty()) {
        lastChar = expr.SubString(expr.Length(), 1); // Получаем последний символ
    }

    // Корректное сравнение через AnsiString
    if (expr.IsEmpty() ||
        lastChar == "+" ||
        lastChar == "-" ||
        lastChar == "*" ||
        lastChar == "/")
    {
        Edit1->Text = expr + "acos(";
    } else {
        Edit1->Text = expr + "*acos(";
    }
}

//---------------------------------------------------------------------------

