//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include <math.h>
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

bool has_sin = false;
bool has_comma = false;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------


void __fastcall TForm1::ButtonEqualClick(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
	if(!equation.IsEmpty()){
		AnsiString LastCh = AnsiLastChar(equation);
		if (has_comma) { equation += '0'; }
		if (has_sin) {
			if (LastCh == '(') {
					equation += '0';
			}
			equation += ')';
		}
		if (LastCh == '+' || LastCh == '-') equation += '0';
		else if(LastCh == '/' || LastCh == '*') equation += '1';

		int temp=1;

		while (temp){                                                           // Вычисление синусов
			temp = equation.AnsiPos("s");
			if (temp) {
				AnsiString prev_substr = equation.SubString(0, temp-1);
				AnsiString next_substr = equation.SubString(equation.AnsiPos(")")+1, equation.Length());
				double f; AnsiString number = equation.SubString(equation.AnsiPos("(")+1, equation.AnsiPos(")") - equation.AnsiPos("(")-1);
				if (TryStrToFloat(number, f)) {
					double s;
					if ((f/180==(int)f/180) && int(f)%180==0) s = 0;
					else s = sin(M_PI * f / 180);
					equation = prev_substr + s+ next_substr;
				}
			}
			has_sin = false;
			has_comma = false;
		}
		temp=1;
		while (temp){                                                           // Вычисление произведения
			temp = equation.AnsiPos("*");
			if (temp) {

					int number_pos = temp-1; double number1, number2; AnsiString number="";
					while (number_pos){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number = (AnsiString)equation[number_pos] + (AnsiString)number;
						number_pos--;
					}

					double f;
					if (TryStrToFloat(number, f)) number1 = f;
					else return;
					AnsiString prev_substr = equation.SubString(0, number_pos);

					number_pos = temp+1; number = "";
					while (number_pos!=equation.Length()+1){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number += equation[number_pos];
						number_pos++;
					}
					if (TryStrToFloat(number, f)) number2 = f;
					else return;
					AnsiString next_substr = equation.SubString(number_pos, equation.Length()-number_pos+1);

					equation = prev_substr + number1*number2+ next_substr;
			}

		}
		temp=1;
		while (temp){                                                           // Вычисление произведения
			temp = equation.AnsiPos("/");
			if (temp) {
					int number_pos = temp-1; double number1, number2; AnsiString number="";
					while (number_pos){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number = (AnsiString)equation[number_pos] + (AnsiString)number;
						number_pos--;
					}

					double f;
					if (TryStrToFloat(number, f)) number1 = f;
					else return;
					AnsiString prev_substr = equation.SubString(0, number_pos);

					number_pos = temp+1; number = "";
					while (number_pos!=equation.Length()+1){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number += equation[number_pos];
						number_pos++;
					}
					if (TryStrToFloat(number, f)) number2 = f;
					if (!number2) {
						Edit1->Text="Деление на ноль";
						return;
					}
					else return;
					AnsiString next_substr = equation.SubString(number_pos, equation.Length()-number_pos+1);

					equation = prev_substr + number1/number2+ next_substr;
			}

		}
		double f;
		temp = 1;
		while (equation.AnsiPos("+") || equation.AnsiPos("-")){                  // Вычисление суммы и разности

			if (equation.AnsiPos("+") && equation.AnsiPos("+") < equation.AnsiPos("-") || !(equation.AnsiPos("-"))){
				temp = equation.AnsiPos("+");

			}
			else temp = equation.AnsiPos("-");

			if (!TryStrToFloat(equation, f)) {
					if (true) {

					}
					int number_pos = temp-1; double number1, number2; AnsiString number="";
					while (number_pos){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number = (AnsiString)equation[number_pos] + (AnsiString)number;
						number_pos--;
					}

					double f;
					if (TryStrToFloat(number, f)) number1 = f;
					else return;
					AnsiString prev_substr = equation.SubString(0, number_pos);

					number_pos = temp+1; number = "";
					while (number_pos!=equation.Length()+1){
						if (equation[number_pos] == '+' || equation[number_pos] == '-' || equation[number_pos] == '/' || equation[number_pos] == '*') {
							break;
						}
						number += equation[number_pos];
						number_pos++;
					}
					if (TryStrToFloat(number, f)) number2 = f;
					else return;
					AnsiString next_substr = equation.SubString(number_pos, equation.Length()-number_pos+1);

					if (equation[temp]=='+') {
						equation = prev_substr + (number1+number2) + next_substr;
					}
					else equation = prev_substr + (number1-number2) + next_substr;
			}
			else break;

		}

		Edit1->Text=equation;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::NumberPress(TObject *Sender)
{
	TButton * button = dynamic_cast<TButton*>(Sender);
	Edit1->Text+= button->Caption;
}
//---------------------------------------------------------------------------


void __fastcall TForm1::OperationPress(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
	AnsiString LastCh = AnsiLastChar(equation);
	TButton * button = dynamic_cast<TButton*>(Sender);
	if (!equation.IsEmpty()) {
		if (LastCh == '+' || (LastCh == '-') || LastCh == '/' || LastCh == '*') {
			equation.SetLength(equation.Length()-1);
			Edit1->Text=equation;
		}
		if (has_sin) {
			if (LastCh == '(') {
				if (button->Caption!='-') {
					equation += '0';
				}
				else{
					Edit1->Text+= button->Caption;
					return;
				}
			}
			equation += ')';
			has_sin = false;
			Edit1->Text=equation;
		}
		if (has_comma) {
			equation += '0';
			Edit1->Text=equation;
			has_comma = false;
		}

		Edit1->Text+= button->Caption;
	}
	else {
		TButton * button = dynamic_cast<TButton*>(Sender);
		if (button->Caption == '-') {
			Edit1->Text+= "0-";
		}
	}

	if (has_comma) has_comma = false;


}
//---------------------------------------------------------------------------

void __fastcall TForm1::BackspacePress(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
    AnsiString LastCh = AnsiLastChar(equation);
	if (LastCh==')') {
		has_sin = true;
	}
	if (LastCh==',') {
		has_comma = false;
	}
	equation.SetLength(equation.Length()-1);
	Edit1->Text=equation;

}
//---------------------------------------------------------------------------

void __fastcall TForm1::ClearAll(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
	equation.SetLength(0);
	Edit1->Text=equation;
	has_sin = false;
	has_comma = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SinPress(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
	AnsiString LastCh = AnsiLastChar(equation);
	if (equation.IsEmpty() || LastCh == '+' || LastCh == '-' || LastCh == '/' || LastCh == '*') {
		equation += "sin(";
		has_sin = true;
	}
	else{
		if (has_comma) {
			equation += "0*sin(";
			has_comma = false;
		}
		else if (has_sin) {
			if (LastCh == '(') {
				equation += '0';
			}
			equation += ")*sin(";
			Edit1->Text=equation;
		}
		else equation += "*sin(";
		has_sin = true;
	}
	Edit1->Text=equation;

}
//---------------------------------------------------------------------------

void __fastcall TForm1::CommaPress(TObject *Sender)
{
	AnsiString equation = Edit1->Text;
	AnsiString LastCh = AnsiLastChar(equation);
	if (!has_comma) {
		if (equation.IsEmpty() || LastCh == '+' || LastCh == '-' || LastCh == '/' || LastCh == '*'|| LastCh == '(') {
			equation += "0,";
			Edit1->Text=equation;
		}
		else if (LastCh != ','){
			equation += ',';
		}
		Edit1->Text=equation;
		has_comma = true;
	}

}
//---------------------------------------------------------------------------

